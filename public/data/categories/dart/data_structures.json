[
    {
      "question": "What is the primary difference between a stack and a queue in data structures?",
      "correct_answer": "A stack works on LIFO (Last In, First Out), while a queue works on FIFO (First In, First Out).",
      "incorrect_answers": [
        "A stack is used for sorting, while a queue is used for searching.",
        "A stack can store only integers, while a queue can store any type.",
        "A stack and a queue are identical but differ in memory allocation."
      ],
      "explanation": "A stack operates on the principle of Last In, First Out (LIFO), meaning the last element added is the first one to be removed. A queue operates on First In, First Out (FIFO), meaning the first element added is the first one to be removed."
    },
    {
      "question": "What is the primary purpose of a hash code in Dart?",
      "correct_answer": "To provide a unique integer representation of an object for use in `Map` or `Set`.",
      "incorrect_answers": [
        "To store data temporarily in memory.",
        "To improve the performance of lists.",
        "To convert objects into strings."
      ],
      "explanation": "The `hashCode` property returns an integer that uniquely identifies an object. It is used in data structures like `Map` and `Set` for quick lookup."
    },
    {
      "question": "Which Dart data structure is best suited for ensuring unique elements?",
      "correct_answer": "`Set`",
      "incorrect_answers": [
        "`List`",
        "`Map`",
        "`Queue`"
      ],
      "explanation": "A `Set` in Dart is an unordered collection of unique elements, ensuring that no duplicates are present."
    },
    {
      "question": "What is an `Iterable` in Dart?",
      "correct_answer": "An `Iterable` represents a collection of values that can be accessed sequentially.",
      "incorrect_answers": [
        "An `Iterable` is a special type of `Map`.",
        "An `Iterable` is a collection that always stores unique values.",
        "An `Iterable` is a function that generates values on demand."
      ],
      "explanation": "An `Iterable` is a Dart interface that allows sequential access to elements in a collection. Examples include `List` and `Set`."
    },
    {
      "question": "What will the following Dart code output?\n```dart\nvoid main() {\n  var numbers = [1, 2, 3];\n  print(numbers.reversed);\n}\n```",
      "correct_answer": "(3, 2, 1)",
      "incorrect_answers": [
        "[3, 2, 1]",
        "3, 2, 1",
        "An error because `reversed` is not supported on lists."
      ],
      "explanation": "`reversed` is a property of the `List` class in Dart, which returns an `Iterable` in reverse order. To convert it to a `List`, you would use `.toList()`."
    },
    {
      "question": "Which data structure in Dart is key-value based?",
      "correct_answer": "`Map`",
      "incorrect_answers": [
        "`Set`",
        "`List`",
        "`Queue`"
      ],
      "explanation": "A `Map` in Dart is a collection of key-value pairs where each key is unique and associated with a value."
    },
    {
      "question": "What will the following code output?\n```dart\nvoid main() {\n  var map = {'a': 1, 'b': 2};\n  print(map['c']);\n}\n```",
      "correct_answer": "null",
      "incorrect_answers": [
        "0",
        "An error because 'c' is not a key.",
        "An empty string"
      ],
      "explanation": "If a key does not exist in a `Map`, accessing it will return `null` by default."
    },
    {
      "question": "What is a characteristic of linked lists compared to arrays?",
      "correct_answer": "Linked lists allow dynamic memory allocation and easier insertion/deletion.",
      "incorrect_answers": [
        "Linked lists are faster for random access than arrays.",
        "Linked lists can only store integer values.",
        "Linked lists are immutable in Dart."
      ],
      "explanation": "Unlike arrays, linked lists dynamically allocate memory and provide efficient insertion and deletion, but they do not support direct access to elements by index."
    },
    {
      "question": "What does the `hashCode` property guarantee in Dart?",
      "correct_answer": "Objects that are equal according to the `==` operator must have the same `hashCode`.",
      "incorrect_answers": [
        "Every object has a unique `hashCode`.",
        "The `hashCode` changes every time the program runs.",
        "`hashCode` is used to store objects as strings."
      ],
      "explanation": "The `hashCode` property in Dart ensures that equal objects (`==`) have the same hash code. However, two different objects may still have the same hash code (hash collision)."
    },
    {
      "question": "What is the primary use of a tree data structure?",
      "correct_answer": "To represent hierarchical relationships.",
      "incorrect_answers": [
        "To store data in a continuous block of memory.",
        "To ensure quick access using hashing.",
        "To store data sequentially."
      ],
      "explanation": "A tree is a hierarchical data structure that organizes data in a parent-child relationship. Common examples include binary trees and file directory structures."
    }
  ]
[
  {
    "question": "What is Tween Animation in Flutter and how do you implement it?",
    "correct_answer": "Tween animation interpolates between a beginning and an end value using an `AnimationController`.",
    "incorrect_answers": [
      "Tween animation is used for physics-based animations.",
      "Tween animation requires only an `AnimatedContainer`.",
      "Tween animation works only with implicit widgets."
    ],
    "explanation": "Tween animations are used to interpolate between two values over time. Here's an example:\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass TweenAnimationExample extends StatefulWidget {\n  @override\n  _TweenAnimationExampleState createState() => _TweenAnimationExampleState();\n}\n\nclass _TweenAnimationExampleState extends State<TweenAnimationExample> with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n  late Animation<double> _animation;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      vsync: this,\n      duration: Duration(seconds: 2),\n    );\n\n    _animation = Tween<double>(begin: 0, end: 300).animate(_controller)\n      ..addListener(() {\n        setState(() {});\n      });\n\n    _controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Tween Animation')),\n      body: Center(\n        child: Container(\n          width: _animation.value,\n          height: _animation.value,\n          color: Colors.blue,\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```"
  },
  {
    "question": "What are implicit animations in Flutter? Provide an example.",
    "correct_answer": "Implicit animations automatically handle animations when their properties change.",
    "incorrect_answers": [
      "Implicit animations require explicit control of frames.",
      "Implicit animations cannot use `setState` to trigger changes.",
      "Implicit animations are used for physics-based effects only."
    ],
    "explanation": "Implicit animations use pre-built animated widgets like `AnimatedContainer` or `AnimatedOpacity` to handle animations seamlessly. Here's an example:\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass ImplicitAnimationExample extends StatefulWidget {\n  @override\n  _ImplicitAnimationExampleState createState() => _ImplicitAnimationExampleState();\n}\n\nclass _ImplicitAnimationExampleState extends State<ImplicitAnimationExample> {\n  double _size = 100;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Implicit Animation')),\n      body: Center(\n        child: AnimatedContainer(\n          duration: Duration(seconds: 2),\n          width: _size,\n          height: _size,\n          color: Colors.blue,\n          curve: Curves.easeInOut,\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          setState(() {\n            _size = _size == 100 ? 200 : 100;\n          });\n        },\n        child: Icon(Icons.play_arrow),\n      ),\n    );\n  }\n}\n```"
  },
  {
    "question": "What are explicit animations and how do you implement them in Flutter?",
    "correct_answer": "Explicit animations give more control over animation timing and behavior using `AnimationController`.",
    "incorrect_answers": [
      "Explicit animations require only `AnimatedContainer`.",
      "Explicit animations cannot interpolate between values.",
      "Explicit animations do not allow control over animation direction."
    ],
    "explanation": "Explicit animations provide fine-grained control over animations using controllers and listeners. Here's an example:\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass ExplicitAnimationExample extends StatefulWidget {\n  @override\n  _ExplicitAnimationExampleState createState() => _ExplicitAnimationExampleState();\n}\n\nclass _ExplicitAnimationExampleState extends State<ExplicitAnimationExample> with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n  late Animation<double> _animation;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      vsync: this,\n      duration: Duration(seconds: 2),\n    );\n\n    _animation = CurvedAnimation(parent: _controller, curve: Curves.easeInOut);\n\n    _controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Explicit Animation')),\n      body: Center(\n        child: ScaleTransition(\n          scale: _animation,\n          child: Container(\n            width: 100,\n            height: 100,\n            color: Colors.red,\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```"
  },
  {
    "question": "What is a physics-based animation and how is it implemented in Flutter?",
    "correct_answer": "Physics-based animations simulate real-world behaviors using physics models like spring or friction.",
    "incorrect_answers": [
      "Physics-based animations are the same as Tween animations.",
      "Physics-based animations do not allow controlling speed or damping.",
      "Physics-based animations require implicit widgets."
    ],
    "explanation": "Physics-based animations simulate real-world behaviors using `SpringSimulation` or other physics models. Here's an example:\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter/physics.dart';\n\nclass PhysicsAnimationExample extends StatefulWidget {\n  @override\n  _PhysicsAnimationExampleState createState() => _PhysicsAnimationExampleState();\n}\n\nclass _PhysicsAnimationExampleState extends State<PhysicsAnimationExample> with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n  double _position = 0;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController.unbounded(vsync: this);\n    _startAnimation();\n  }\n\n  void _startAnimation() {\n    final spring = SpringDescription(\n      mass: 1,\n      stiffness: 100,\n      damping: 5,\n    );\n\n    final simulation = SpringSimulation(spring, 0, 300, 0);\n\n    _controller.animateWith(simulation).then((_) {\n      setState(() {\n        _position = _controller.value;\n      });\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Physics-Based Animation')),\n      body: Center(\n        child: Container(\n          width: _position,\n          height: 100,\n          color: Colors.green,\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```"
  },
  {
    "question": "What is the purpose of the `AnimationController` in Flutter animations?",
    "correct_answer": "To control the duration, start, stop, and reverse of animations.",
    "incorrect_answers": [
      "To define the UI layout for animations.",
      "To handle physics-based effects.",
      "To manage implicit animations."
    ],
    "explanation": "The `AnimationController` is used to control the timing and playback of animations, such as starting, stopping, or reversing them."
  },
  {
    "question": "What is the role of `CurvedAnimation` in Flutter?",
    "correct_answer": "To apply non-linear curves to animations for more natural motion.",
    "incorrect_answers": [
      "To define the initial and final values of an animation.",
      "To handle physics-based effects.",
      "To manage implicit animations."
    ],
    "explanation": "`CurvedAnimation` applies curves like `Curves.easeInOut` to animations, making them appear more natural and dynamic."
  },
  {
    "question": "How do you create a fade-in animation in Flutter?",
    "correct_answer": "Use `FadeTransition` with an `AnimationController` and `Tween`.",
    "incorrect_answers": [
      "Use `AnimatedContainer` with a duration.",
      "Use `AnimatedOpacity` with a `setState` call.",
      "Use `ScaleTransition` with a `Tween`."
    ],
    "explanation": "`FadeTransition` is used to create fade-in animations by controlling the opacity of a widget. Here's an example:\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass FadeInAnimationExample extends StatefulWidget {\n  @override\n  _FadeInAnimationExampleState createState() => _FadeInAnimationExampleState();\n}\n\nclass _FadeInAnimationExampleState extends State<FadeInAnimationExample> with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n  late Animation<double> _animation;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      vsync: this,\n      duration: Duration(seconds: 2),\n    );\n\n    _animation = Tween<double>(begin: 0, end: 1).animate(_controller);\n    _controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Fade-In Animation')),\n      body: Center(\n        child: FadeTransition(\n          opacity: _animation,\n          child: Container(\n            width: 200,\n            height: 200,\n            color: Colors.blue,\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```"
  },
  {
    "question": "What is the difference between `AnimatedContainer` and `AnimatedBuilder`?",
    "correct_answer": "`AnimatedContainer` automatically animates its properties, while `AnimatedBuilder` provides more control over the animation process.",
    "incorrect_answers": [
      "`AnimatedContainer` is used for physics-based animations.",
      "`AnimatedBuilder` is only for implicit animations.",
      "`AnimatedContainer` cannot animate size or color."
    ],
    "explanation": "`AnimatedContainer` simplifies animations by automatically interpolating its properties, while `AnimatedBuilder` allows for custom animations with more control."
  },
  {
    "question": "How do you create a rotation animation in Flutter?",
    "correct_answer": "Use `RotationTransition` with an `AnimationController` and `Tween`.",
    "incorrect_answers": [
      "Use `AnimatedContainer` with a duration.",
      "Use `AnimatedOpacity` with a `setState` call.",
      "Use `ScaleTransition` with a `Tween`."
    ],
    "explanation": "`RotationTransition` is used to create rotation animations by controlling the rotation of a widget. Here's an example:\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass RotationAnimationExample extends StatefulWidget {\n  @override\n  _RotationAnimationExampleState createState() => _RotationAnimationExampleState();\n}\n\nclass _RotationAnimationExampleState extends State<RotationAnimationExample> with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n  late Animation<double> _animation;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      vsync: this,\n      duration: Duration(seconds: 2),\n    );\n\n    _animation = Tween<double>(begin: 0, end: 1).animate(_controller);\n    _controller.repeat();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Rotation Animation')),\n      body: Center(\n        child: RotationTransition(\n          turns: _animation,\n          child: Container(\n            width: 100,\n            height: 100,\n            color: Colors.blue,\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```"
  },
  {
    "question": "What is the purpose of `Tween` in Flutter animations?",
    "correct_answer": "To define the range of values for an animation.",
    "incorrect_answers": [
      "To control the duration of an animation.",
      "To handle physics-based effects.",
      "To manage implicit animations."
    ],
    "explanation": "`Tween` defines the beginning and ending values for an animation, allowing smooth interpolation between them."
  },
  {
    "question": "How do you create a scale animation in Flutter?",
    "correct_answer": "Use `ScaleTransition` with an `AnimationController` and `Tween`.",
    "incorrect_answers": [
      "Use `AnimatedContainer` with a duration.",
      "Use `AnimatedOpacity` with a `setState` call.",
      "Use `FadeTransition` with a `Tween`."
    ],
    "explanation": "`ScaleTransition` is used to create scale animations by controlling the size of a widget. Here's an example:\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass ScaleAnimationExample extends StatefulWidget {\n  @override\n  _ScaleAnimationExampleState createState() => _ScaleAnimationExampleState();\n}\n\nclass _ScaleAnimationExampleState extends State<ScaleAnimationExample> with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n  late Animation<double> _animation;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      vsync: this,\n      duration: Duration(seconds: 2),\n    );\n\n    _animation = Tween<double>(begin: 0.5, end: 1.5).animate(_controller);\n    _controller.repeat(reverse: true);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Scale Animation')),\n      body: Center(\n        child: ScaleTransition(\n          scale: _animation,\n          child: Container(\n            width: 100,\n            height: 100,\n            color: Colors.blue,\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```"
  },
  {
    "question": "What is the purpose of `AnimatedOpacity` in Flutter?",
    "correct_answer": "To animate the opacity of a widget over time.",
    "incorrect_answers": [
      "To animate the size of a widget.",
      "To animate the position of a widget.",
      "To animate the rotation of a widget."
    ],
    "explanation": "`AnimatedOpacity` is used to animate the opacity of a widget, making it fade in or out over time."
  },
  {
    "question": "How do you create a slide animation in Flutter?",
    "correct_answer": "Use `SlideTransition` with an `AnimationController` and `Tween`.",
    "incorrect_answers": [
      "Use `AnimatedContainer` with a duration.",
      "Use `AnimatedOpacity` with a `setState` call.",
      "Use `FadeTransition` with a `Tween`."
    ],
    "explanation": "`SlideTransition` is used to create slide animations by controlling the position of a widget. Here's an example:\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass SlideAnimationExample extends StatefulWidget {\n  @override\n  _SlideAnimationExampleState createState() => _SlideAnimationExampleState();\n}\n\nclass _SlideAnimationExampleState extends State<SlideAnimationExample> with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n  late Animation<Offset> _animation;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      vsync: this,\n      duration: Duration(seconds: 2),\n    );\n\n    _animation = Tween<Offset>(begin: Offset(-1, 0), end: Offset(0, 0)).animate(_controller);\n    _controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Slide Animation')),\n      body: Center(\n        child: SlideTransition(\n          position: _animation,\n          child: Container(\n            width: 100,\n            height: 100,\n            color: Colors.blue,\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```"
  },
  {
    "question": "What is the purpose of `AnimatedBuilder` in Flutter?",
    "correct_answer": "To build a widget tree that depends on an animation.",
    "incorrect_answers": [
      "To animate the opacity of a widget.",
      "To animate the size of a widget.",
      "To animate the position of a widget."
    ],
    "explanation": "`AnimatedBuilder` is used to build a widget tree that depends on an animation, allowing for more complex animations."
  },
  {
    "question": "How do you create a staggered animation in Flutter?",
    "correct_answer": "Use multiple `AnimationController` instances with different start times.",
    "incorrect_answers": [
      "Use a single `AnimationController` for all animations.",
      "Use `AnimatedContainer` with a duration.",
      "Use `AnimatedOpacity` with a `setState` call."
    ],
    "explanation": "Staggered animations involve multiple animations that start at different times, creating a sequence of effects."
  },
  {
    "question": "What is the purpose of `Hero` animations in Flutter?",
    "correct_answer": "To create seamless transitions between two screens with shared elements.",
    "incorrect_answers": [
      "To animate the opacity of a widget.",
      "To animate the size of a widget.",
      "To animate the position of a widget."
    ],
    "explanation": "`Hero` animations are used to create smooth transitions between two screens by animating shared elements."
  },
  {
    "question": "How do you create a `Hero` animation in Flutter?",
    "correct_answer": "Use the `Hero` widget with a shared tag between two screens.",
    "incorrect_answers": [
      "Use `AnimatedContainer` with a duration.",
      "Use `AnimatedOpacity` with a `setState` call.",
      "Use `FadeTransition` with a `Tween`."
    ],
    "explanation": "`Hero` animations require a shared tag between two screens to animate the transition. Here's an example:\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass HeroAnimationExample extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Hero Animation')),\n      body: Center(\n        child: Hero(\n          tag: 'heroTag',\n          child: Container(\n            width: 100,\n            height: 100,\n            color: Colors.blue,\n          ),\n        ),\n      ),\n    );\n  }\n}\n```"
  },
  {
    "question": "What is the purpose of `AnimatedList` in Flutter?",
    "correct_answer": "To animate the addition or removal of items in a list.",
    "incorrect_answers": [
      "To animate the opacity of a widget.",
      "To animate the size of a widget.",
      "To animate the position of a widget."
    ],
    "explanation": "`AnimatedList` is used to animate the addition or removal of items in a list, providing a smooth user experience."
  },
  {
    "question": "How do you create an `AnimatedList` in Flutter?",
    "correct_answer": "Use the `AnimatedList` widget with a `GlobalKey` and `AnimatedListState`.",
    "incorrect_answers": [
      "Use `AnimatedContainer` with a duration.",
      "Use `AnimatedOpacity` with a `setState` call.",
      "Use `FadeTransition` with a `Tween`."
    ],
    "explanation": "`AnimatedList` requires a `GlobalKey` and `AnimatedListState` to manage the list items and their animations. Here's an example:\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass AnimatedListExample extends StatefulWidget {\n  @override\n  _AnimatedListExampleState createState() => _AnimatedListExampleState();\n}\n\nclass _AnimatedListExampleState extends State<AnimatedListExample> {\n  final GlobalKey<AnimatedListState> _listKey = GlobalKey<AnimatedListState>();\n  final List<String> _items = [];\n\n  void _addItem() {\n    _items.add('Item ${_items.length + 1}');\n    _listKey.currentState!.insertItem(_items.length - 1);\n  }\n\n  void _removeItem(int index) {\n    final removedItem = _items.removeAt(index);\n    _listKey.currentState!.removeItem(index, (context, animation) {\n      return SizeTransition(\n        sizeFactor: animation,\n        child: Card(\n          child: ListTile(\n            title: Text(removedItem),\n          ),\n        ),\n      );\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Animated List')),\n      body: AnimatedList(\n        key: _listKey,\n        initialItemCount: _items.length,\n        itemBuilder: (context, index, animation) {\n          return SizeTransition(\n            sizeFactor: animation,\n            child: Card(\n              child: ListTile(\n                title: Text(_items[index]),\n                trailing: IconButton(\n                  icon: Icon(Icons.delete),\n                  onPressed: () => _removeItem(index),\n                ),\n              ),\n            ),\n          );\n        },\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _addItem,\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n}\n```"
  }
]